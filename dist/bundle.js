(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../shared/constants");
var Grid_1 = require("./Grid");
var View_1 = require("./View");
var Snake_1 = require("./Snake");
var Game = /** @class */ (function () {
    function Game() {
        this.frame = 0;
        this.score = 0;
        this.speed = constants_1.MIN_SPEED;
        this.direction = constants_1.DIRECTION.RIGHT;
        this.isPaused = false;
        this.grid = new Grid_1.default();
        this.view = new View_1.default(this.grid.columnsQuantity, this.grid.rowsQuantity);
        this.snake = new Snake_1.default(this.grid);
        window.addEventListener('keydown', this.onKeyDown.bind(this));
        this.generateApple();
    }
    Game.prototype.start = function () {
        this.view.hideStartScreen();
        window.focus();
        window.requestAnimationFrame(this.startLoop.bind(this));
    };
    Game.prototype.pause = function () {
        this.isPaused = true;
        this.view.togglePauseScreen();
    };
    Game.prototype.resume = function () {
        this.isPaused = false;
        this.view.togglePauseScreen();
        window.requestAnimationFrame(this.startLoop.bind(this));
    };
    Game.prototype.onKeyDown = function (event) {
        switch (event.key) {
            case constants_1.KEY.ARROW_RIGHT:
                this.tempDirection = constants_1.DIRECTION.RIGHT;
                break;
            case constants_1.KEY.ARROW_LEFT:
                this.tempDirection = constants_1.DIRECTION.LEFT;
                break;
            case constants_1.KEY.ARROW_UP:
                this.tempDirection = constants_1.DIRECTION.UP;
                break;
            case constants_1.KEY.ARROW_DOWN:
                this.tempDirection = constants_1.DIRECTION.DOWN;
                break;
            case constants_1.KEY.ENTER:
                if (!this.frame) {
                    this.start();
                }
                break;
            case constants_1.KEY.SPACE:
                if (this.frame) {
                    this.isPaused ? this.resume() : this.pause();
                }
                break;
        }
    };
    Game.prototype.generateApple = function () {
        var emptyCoordinates = this.getEmptyCoordinates();
        var foodCoordinate = emptyCoordinates[Math.floor(Math.random() * (emptyCoordinates.length - 1))];
        this.grid.setCell(foodCoordinate, constants_1.CELL_TYPE.APPLE);
    };
    Game.prototype.getEmptyCoordinates = function () {
        var emptyCoordinates = [];
        for (var row = 0; row < this.grid.rowsQuantity; row++) {
            for (var column = 0; column < this.grid.columnsQuantity; column++) {
                if (this.grid.getCell({ row: row, column: column }) === constants_1.CELL_TYPE.EMPTY) {
                    emptyCoordinates.push({ row: row, column: column });
                }
            }
        }
        return emptyCoordinates;
    };
    Game.prototype.startLoop = function () {
        if (this.isPaused) {
            return;
        }
        if (++this.frame % (constants_1.MAX_SPEED - this.speed || constants_1.MIN_SPEED) !== 0) {
            window.requestAnimationFrame(this.startLoop.bind(this));
            return;
        }
        var headRow = this.snake.head.row;
        var headColumn = this.snake.head.column;
        switch (this.getNextDirection()) {
            case constants_1.DIRECTION.RIGHT:
                headColumn++;
                break;
            case constants_1.DIRECTION.LEFT:
                headColumn--;
                break;
            case constants_1.DIRECTION.UP:
                headRow--;
                break;
            case constants_1.DIRECTION.DOWN:
                headRow++;
                break;
        }
        if (this.checkGameOver({ row: headRow, column: headColumn })) {
            // todo handle game over
            return;
        }
        var isGetApple = this.grid.getCell({ row: headRow, column: headColumn }) === constants_1.CELL_TYPE.APPLE;
        if (isGetApple) {
            this.snake.eat({ row: headRow, column: headColumn });
            this.generateApple();
            this.updateScore(++this.score);
        }
        this.snake.move({ row: headRow, column: headColumn });
        this.view.draw(this.grid.grid);
        window.requestAnimationFrame(this.startLoop.bind(this));
    };
    Game.prototype.getNextDirection = function () {
        switch (this.tempDirection) {
            case constants_1.DIRECTION.RIGHT:
                if (this.direction !== constants_1.DIRECTION.LEFT) {
                    this.direction = constants_1.DIRECTION.RIGHT;
                }
                break;
            case constants_1.DIRECTION.LEFT:
                if (this.direction !== constants_1.DIRECTION.RIGHT) {
                    this.direction = constants_1.DIRECTION.LEFT;
                }
                break;
            case constants_1.DIRECTION.UP:
                if (this.direction !== constants_1.DIRECTION.DOWN) {
                    this.direction = constants_1.DIRECTION.UP;
                }
                break;
            case constants_1.DIRECTION.DOWN:
                if (this.direction !== constants_1.DIRECTION.UP) {
                    this.direction = constants_1.DIRECTION.DOWN;
                }
                break;
        }
        return this.direction;
    };
    Game.prototype.updateScore = function (score) {
        if (this.score % constants_1.SPEED_INCREASE_INTERVAL === 0) {
            this.view.updateSpeed(++this.speed);
        }
        this.view.updateScore(this.score);
    };
    Game.prototype.checkGameOver = function (snakeHead) {
        var isTouchedBorder = snakeHead.row < 0 || snakeHead.column < 0 || snakeHead.row > this.grid.rowsQuantity - 1 || snakeHead.column > this.grid.columnsQuantity - 1;
        var isTouchedHerself = this.grid.getCell(snakeHead) === constants_1.CELL_TYPE.SNAKE;
        return isTouchedBorder || isTouchedHerself;
    };
    return Game;
}());
exports.default = Game;

},{"../shared/constants":6,"./Grid":2,"./Snake":3,"./View":4}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../shared/constants");
var Grid = /** @class */ (function () {
    function Grid() {
        this._grid = [];
        this._cols = Math.round(window.innerWidth / constants_1.CELL_SIZE) - constants_1.GRID_MARGIN;
        this._rows = Math.round(window.innerHeight / constants_1.CELL_SIZE) - constants_1.GRID_MARGIN;
        for (var row = 0; row < this._rows; row++) {
            this._grid[row] = [];
            for (var column = 0; column < this._cols; column++) {
                this._grid[row][column] = constants_1.CELL_TYPE.EMPTY;
            }
        }
    }
    Object.defineProperty(Grid.prototype, "columnsQuantity", {
        get: function () {
            return this._cols;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Grid.prototype, "rowsQuantity", {
        get: function () {
            return this._rows;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Grid.prototype, "grid", {
        get: function () {
            return this._grid;
        },
        enumerable: true,
        configurable: true
    });
    Grid.prototype.getCell = function (coordinate) {
        return this._grid[coordinate.row][coordinate.column];
    };
    Grid.prototype.setCell = function (coordinate, type) {
        this._grid[coordinate.row][coordinate.column] = type;
    };
    return Grid;
}());
exports.default = Grid;

},{"../shared/constants":6}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../shared/constants");
var Snake = /** @class */ (function () {
    function Snake(grid) {
        this.grid = grid;
        this.chain = [];
        this.chain.push(constants_1.START_SNAKE_COORDINATE);
    }
    Object.defineProperty(Snake.prototype, "head", {
        get: function () {
            return this.chain[0];
        },
        enumerable: true,
        configurable: true
    });
    Snake.prototype.eat = function (coordinate) {
        this.chain.unshift(coordinate);
        this.grid.setCell(coordinate, constants_1.CELL_TYPE.SNAKE);
    };
    Snake.prototype.move = function (coordinate) {
        this.chain.unshift(coordinate);
        this.grid.setCell(coordinate, constants_1.CELL_TYPE.SNAKE);
        var nextCoordinate = {
            row: this.chain[this.chain.length - 1].row,
            column: this.chain[this.chain.length - 1].column
        };
        this.grid.setCell(nextCoordinate, constants_1.CELL_TYPE.EMPTY);
        this.chain.pop();
    };
    return Snake;
}());
exports.default = Snake;

},{"../shared/constants":6}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("../shared/constants");
var View = /** @class */ (function () {
    function View(cols, rows) {
        this.cols = cols;
        this.rows = rows;
        this.startScreen = document.getElementsByClassName('popup--start')[0];
        this.pauseScreen = document.getElementsByClassName('popup--pause')[0];
        this.scoreContainer = document.getElementsByClassName('score')[0];
        this.speedContainer = document.getElementsByClassName('speed')[0];
        this.canvas = document.getElementsByClassName('battlefield')[0];
        this.canvas.setAttribute('width', this.cols * constants_1.CELL_SIZE + "px");
        this.canvas.setAttribute('height', this.rows * constants_1.CELL_SIZE + "px");
        this.ctx = this.canvas.getContext('2d');
    }
    View.prototype.draw = function (grid) {
        var _this = this;
        grid.forEach(function (rowArr, row) {
            rowArr.forEach(function (type, column) {
                _this.drawCell({ row: row, column: column }, type);
            });
        });
    };
    View.prototype.updateScore = function (score) {
        this.scoreContainer.textContent = score.toString();
    };
    View.prototype.updateSpeed = function (speed) {
        this.speedContainer.textContent = speed.toString();
    };
    View.prototype.hideStartScreen = function () {
        this.startScreen.style.display = 'none';
    };
    View.prototype.togglePauseScreen = function () {
        this.pauseScreen.style.display = this.pauseScreen.style.display === 'flex' ? 'none' : 'flex';
    };
    View.prototype.drawCell = function (coordinate, type) {
        this.ctx.fillStyle = constants_1.COLOR[type] || constants_1.COLOR[constants_1.CELL_TYPE.EMPTY];
        this.ctx.fillRect(coordinate.column * constants_1.CELL_SIZE, coordinate.row * constants_1.CELL_SIZE, constants_1.CELL_SIZE, constants_1.CELL_SIZE);
    };
    ;
    return View;
}());
exports.default = View;

},{"../shared/constants":6}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Game_1 = require("./controllers/Game");
var game = new Game_1.default();
var startButton = document.getElementsByClassName('popup__button')[0];
startButton.addEventListener('click', function () { return game.start(); });

},{"./controllers/Game":1}],6:[function(require,module,exports){
"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.CELL_SIZE = 20;
exports.GRID_MARGIN = 6;
exports.MIN_SPEED = 1;
exports.MAX_SPEED = 8;
exports.SPEED_INCREASE_INTERVAL = 5;
exports.START_SNAKE_COORDINATE = {
    row: 3,
    column: 3
};
var KEY;
(function (KEY) {
    KEY["ARROW_UP"] = "ArrowUp";
    KEY["ARROW_RIGHT"] = "ArrowRight";
    KEY["ARROW_DOWN"] = "ArrowDown";
    KEY["ARROW_LEFT"] = "ArrowLeft";
    KEY["ENTER"] = "Enter";
    KEY["SPACE"] = " ";
})(KEY = exports.KEY || (exports.KEY = {}));
var CELL_TYPE;
(function (CELL_TYPE) {
    CELL_TYPE[CELL_TYPE["EMPTY"] = 0] = "EMPTY";
    CELL_TYPE[CELL_TYPE["SNAKE"] = 1] = "SNAKE";
    CELL_TYPE[CELL_TYPE["APPLE"] = 2] = "APPLE";
    CELL_TYPE[CELL_TYPE["CRASH"] = 3] = "CRASH";
})(CELL_TYPE = exports.CELL_TYPE || (exports.CELL_TYPE = {}));
var DIRECTION;
(function (DIRECTION) {
    DIRECTION[DIRECTION["RIGHT"] = 0] = "RIGHT";
    DIRECTION[DIRECTION["LEFT"] = 1] = "LEFT";
    DIRECTION[DIRECTION["DOWN"] = 2] = "DOWN";
    DIRECTION[DIRECTION["UP"] = 3] = "UP";
})(DIRECTION = exports.DIRECTION || (exports.DIRECTION = {}));
exports.COLOR = (_a = {},
    _a[CELL_TYPE.SNAKE] = '#0057e7',
    _a[CELL_TYPE.APPLE] = '#d62d20',
    _a[CELL_TYPE.CRASH] = '#ffa700',
    _a[CELL_TYPE.EMPTY] = '#ffffff',
    _a);

},{}]},{},[5])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
